// Используйте конструктор для создания объектов
// Вот Birdконструктор из предыдущей задачи:

// function Bird() {
//   this.name = "Albert";
//   this.color  = "blue";
//   this.numLegs = 2;
// }

// let blueBird = new Bird();
// ПРИМЕЧАНИЕ: this внутри конструктор всегда ссылается на создаваемый объект.

// Обратите внимание, что newоператор используется при вызове конструктора. Это говорит JavaScript создать новый экземпляр 
// с Birdименем blueBird. Без newоператора thisконструктор внутри не указывал бы на вновь созданный объект, что давало бы 
// неожиданные результаты. Теперь blueBirdвсе свойства определены внутри Birdконструктора:

// blueBird.name;
// blueBird.color;
// blueBird.numLegs;
// Как и любой другой объект, к его свойствам можно получить доступ и изменить их:

// blueBird.name = 'Elvira';
// blueBird.name;

//task
// Используйте Dog конструктор из прошлого урока, чтобы создать новый экземпляр Dog, назначив его переменной hound.
function Dog() {
    this.name = "Rupert";
    this.color = "brown";
    this.numLegs = 4;
  }
  // Only change code below this line
  let hound = new Dog();





//   Расширение конструкторов для получения аргументов
// Конструкторы Birdи Dog из последнего вызова работали хорошо. Однако обратите внимание, что все Birdsобъекты,
//  созданные с помощью Birdконструктора, автоматически называются Альбертом, имеют синий цвет и две ножки. Что
//  , если вам нужны птицы с разными значениями имени и цвета? Можно изменить свойства каждой птицы вручную, но это потребует
//   много работы:

// let swan = new Bird();
// swan.name = "Carlos";
// swan.color = "white";


// Предположим, вы пишете программу для отслеживания сотен или даже тысяч различных птиц в вольере. Потребовалось бы много времени,
//  чтобы создать всех птиц, а затем изменить свойства на разные значения для каждой из них. Чтобы упростить создание различных 
//  Birdобъектов, вы можете настроить конструктор Bird так, чтобы он принимал параметры:

// function Bird(name, color) {
//   this.name = name;
//   this.color = color;
//   this.numLegs = 2;
// }
// Затем передайте значения в качестве аргументов для определения каждой уникальной птицы в Birdконструкторе:
//  let cardinal = new Bird("Bruce", "red");это дает новый экземпляр Birdсо свойствами nameи , colorустановленными в Bruceи 
//  redсоответственно. Свойство numLegsпо-прежнему имеет значение 2. cardinalИмеет следующие свойства:

// cardinal.name
// cardinal.color
// cardinal.numLegs
// Конструктор более гибкий. Теперь можно определить свойства для каждого Birdво время его создания, что является одним из способов,
//  которым так полезны конструкторы JavaScript. Они группируют объекты вместе на основе общих характеристик и поведения и
//   определяют план, который автоматизирует их создание.


//task
// Создайте еще один Dog конструктор. На этот раз настройте его так, чтобы он принимал параметры nameи colorи зафиксируйте свойство
//  numLegs равным 4. Затем создайте новое Dog сохраненное значение в переменной terrier. Передайте ему две строки в качестве 
//  аргументов для свойств nameи color.


// soll
function Dog(name, color) {
    this.name = name;
    this.color = color
    this.numLegs = 4
  }
  
  let terrier = new Dog('ssd', 'black')
  console.log(terrier)