// Создание сложных многомерных массивов
// Потрясающий! Вы только что многое узнали о массивах! Это был довольно общий обзор,
// и о работе с массивами можно узнать еще много, многое из того, что вы увидите в
//  последующих разделах. Но прежде чем перейти к рассмотрению объектов ,
//   давайте еще раз взглянем и посмотрим, как массивы могут стать немного более
//    сложными, чем то, что мы видели в предыдущих задачах.

// Одной из самых мощных особенностей массивов как структур данных является то, 
// что массивы могут содержать или даже полностью состоять из других массивов.
//  Мы видели массивы, которые содержат массивы в предыдущих задачах, но довольно 
//  простые. Однако массивы могут содержать бесконечную глубину массивов, которые 
//  могут содержать другие массивы, каждый со своими произвольными уровнями глубины,
//   и так далее. Таким образом, массив может очень быстро превратиться в очень 
//   сложную структуру данных, известную как многомерный или вложенный массив. 
//   Рассмотрим следующий пример:

// let nestedArray = [
//   ['deep'],
//   [
//     ['deeper'], ['deeper'] 
//   ],
//   [
//     [
//       ['deepest'], ['deepest']
//     ],
//     [
//       [
//         ['deepest-est?']
//       ]
//     ]
//   ]
// ];
// Массив deepвложен на 2 уровня в глубину. Массивы deeperимеют 3 уровня глубины.
//  Массивы deepestимеют 4 уровня, а массивы deepest-est?— 5.

// Хотя этот пример может показаться запутанным, такой уровень сложности не 
// является неслыханным или даже необычным при работе с большими объемами данных.
//  Тем не менее, мы все еще можем очень легко получить доступ к самым глубоким 
//  уровням массива этого сложного с помощью записи в скобках:

// console.log(nestedArray[2][1][0][0][0]);
// Это регистрирует строку deepest-est?. И теперь, когда мы знаем, где находится
//  этот фрагмент данных, мы можем сбросить его, если нам нужно:

// nestedArray[2][1][0][0][0] = 'deeper still';

// console.log(nestedArray[2][1][0][0][0]);
// Теперь он регистрируется deeper still.

//task
// Мы определили переменную, myNestedArrayприравняв ее к массиву. 
// Измените myNestedArray, используя любую комбинацию строк , чисел и логических
//  значений для элементов данных, чтобы он имел ровно пять уровней глубины (помните,
// что самый внешний массив — это уровень 1). Где-то на третьем уровне включите
// строку deep, на четвертом уровне включите строку deeperи на пятом уровне
// включите строку deepest.

//sol
let myNestedArray = [
    // Only change code below this line
    ['unshift', false, 1, 2, 3, 'complex', 'nested'],
    ['loop', 'shift', 6, 7, 1000, 'method'],
    ['concat', false, true, 'spread', 'array',['deep']],
    ['mutate', 1327.98, 'splice', 'slice', 'push',[['deeper']]],
    ['iterate', 1.3849, 7, '8.4876', 'arbitrary', 'depth',[[['deepest']]]]
    // Only change code above this line
  ];
  
//sol 2  
let myNestedArraySol2 = [
    // Only change code below this line
    'level 1',                   /* myNestedArray[0]             */
    ['level 2'],	               /* myNestedArray[1][0]          */
    [['level 3','deep']],	       /* myNestedArray[2][0][0]       */
    [[['level 4','deeper']]],    /* myNestedArray[3][0][0][0]    */
    [[[['level 5','deepest']]]]  /* myNestedArray[4][0][0][0][0] */
    // Only change code above this line
  ];